# The script below is not yet generic... You must first compile the google/benchmark code and install it system wide (or you have to custom the "-lbenchmark" option...). After this:

NVCC="nvcc"
CC="/usr/bin/gcc"
NVCCFLAGS="-ccbin=$CC -Xcompiler -fPIC -shared"

# the kernel to be compared:
#FUN="Grad<GaussKernel<_P<0>,_X<0,3>,_Y<1,3>,_Y<2,3>>,_X<0,3>,_X<3,3>>"
FUN="GradGaussKernel_specific<3,3,_X<0,3>,_X<3,3>>" #new "specific inside generic" version, should be almost as fast as the specific...
SPECIFIC="cuda_grad1conv"

# (Joan) I think there is a problem with the call to cuda_grad1conv : when I do "nvprof build/bench", only the call 
# to the generic kernel is listed, not the one from cuda_grad1conv. So it looks like only the memory transfers are done
# and the kernel is not launched..

# First: compile (but do not link) the benchmark (because of '-c' flag) 
$NVCC -D_MWAITXINTRIN_H_INCLUDED -D_FORCE_INLINES -std=c++11 -lbenchmark -O2 -c test/bench.cu -o build/bench.o

# Second: create the shared objects that you want to compare:
./compile $FUN
$NVCC -D "USE_DOUBLE_PRECISION=0" -D "CUDA_BLOCK_SIZE=192" $NVCCFLAGS -I../../convolutions/ -o "build/"$SPECIFIC".so"   "../../convolutions/"$SPECIFIC".cu"

# Third: link all together
$NVCC -o build/bench -lbenchmark build/bench.o $(pwd)"/build/"$FUN"_float.so" $(pwd)"/build/"$SPECIFIC".so"
