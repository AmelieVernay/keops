% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic-keops_kernel.R
\name{keops_kernel}
\alias{keops_kernel}
\title{Defines a new operators}
\usage{
keops_kernel(formula, args)
}
\arguments{
\item{formula}{text string, an operator formula (see Details).}

\item{args}{vector of text string, formula arguments (see Details).}
}
\value{
a function that can be used to compute the value of the formula
on actual data. This function takes at input a list of data corresponding
to the formula arguments and return the computed values (generally a
vector or a matrix depending on the reduction).
}
\description{
This function is the core of the KeOps library, it allows you to create
new operators based on kernel operation and matrix reduction discribed as a
mathematic formula.
}
\details{
KeOps operators are defined by using

FIXME
See \url{https://www.kernel-operations.io/keops/api/math-operations.html}

Important:
}
\examples{
\dontrun{
## Example 1
# Define a function that computes for each i the sum over j
# of the scalar products of `x_i` and `y_j` (both 3d vectors)
F <- keops_kernel(formula = "Sum_Reduction((x|y), 1)",
                  args = c("x=Vi(3)", "y=Vj(3)"))
## data
nx <- 10
ny <- 15

# case 1
# x_i = rows of the matrix x (not contiguous in memory)
x <- matrix(runif(nx*3), nrow=nx, ncol=3)
# y _j = rows of the matrix y (not contiguous in memory)
y <- matrix(runif(ny*3), nrow=ny, ncol=3)
# compute the result
res <- F(list(x,y))

# case 2
# x_i = columns of the matrix x (contiguous in memory)
x <- matrix(runif(nx*3), nrow=3, ncol=nx)
# y _j = rows of the matrix y (contiguous in memory)
y <- matrix(runif(ny*3), nrow=3, ncol=ny)
# compute the result
res <- F(list(x,y))

## Example 2
# Define a function that computes the the convolution with a Gauss kernel 
# i.e. the sum over j of `e^(lambda*||x_i - y_j||^2) * beta_j` where `x_i`, 
# `y_j` and `beta_j` are 3d vectors, and `lambda` is a scalar
F = keops_kernel(formula = "Sum_Reduction(Exp(lambda*SqNorm2(x-y))*beta,0)",
                 args = c("x=Vi(3)", "y=Vj(3)", 
                          "beta=Vj(3)", "lambda=Pm(1)"))

# data
nx <- 10
ny <- 15
# x_i = rows of the matrix x (not contiguous in memory)
x <- matrix(runif(nx*3), nrow=nx, ncol=3)
# y _j = rows of the matrix y (not contiguous in memory)
y <- matrix(runif(ny*3), nrow=ny, ncol=3)
# beta_j = rows of the matrix y (not contiguous in memory)
beta <- matrix(runif(ny*3), nrow=ny, ncol=3)
# !! important !! y and beta should have the same dimension

# parameter
lambda <- 0.25

# compute the result
res <- F(list(x, y, beta, lambda))
}
}
\author{
Ghislain Durif
}
