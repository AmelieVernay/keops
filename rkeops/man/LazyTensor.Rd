% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rkeops_lazytensor_operations.R
\name{LazyTensor}
\alias{LazyTensor}
\title{Build and return a LazyTensor object}
\usage{
LazyTensor(x, index = NA)
}
\arguments{
\item{x}{A matrix or a vector of numeric values, or a scalar value}

\item{index}{A text string that should be either \strong{i} or \strong{j}, or an \strong{NA} value (the default),
to specify whether if the \strong{x} variable is indexed by \strong{i}, by \strong{j}, or is a fixed parameter across indices.
If \strong{x} is a matrix, \strong{index} must be \strong{i} or \strong{j}.}
}
\value{
An object of class "LazyTensor", which is a list with the following elements:

\itemize{
\item{\strong{formula}:}{ A string defining the mathematical operation to be computed by the KeOps routine}
\item{\strong{args}:}{ A vector of arguments containing a unique identifier associated to type of the argument :
\itemize{
\item{\strong{Vi(n)}:}{ vector indexed by \strong{i} of dim \strong{n}}
\item{\strong{Vj(n)}:}{ vector indexed by \strong{j} of dim \strong{n}}
\item{\strong{Pm(n)}:}{ fixed parameter of dim \strong{n}}
}}
\item{\strong{vars}:}{ A list of R matrices which will be the inputs of the KeOps routine}
}

\strong{Alternatives}
\itemize{
\item LazyTensor(x, "i") is equivalent to Vi(x) (see "Vi()" function)
\item LazyTensor(x, "j") is equivalent to Vi(x) (see "Vj()" function)
\item LazyTensor(x) is equivalent to Pm(x) (see "Pm()" function)
}
}
\description{
LazyTensors objects are wrappers around R matrices or vectors that are used to create
symbolic formulas for the KeOps reduction operations.
}
\details{
The use of the function \code{LazyTensor} is detailed in the vignettes.
Run \code{browseVignettes("rkeops")} to access the vignettes.
}
\examples{
\dontrun{
# Data
nx <- 100
ny <- 150
x <- matrix(runif(nx * 3), nrow = nx, ncol = 3) # arbitrary R matrix representing 100 data points in R^3
y <- matrix(runif(ny * 3), nrow = ny, ncol = 3) # arbitrary R matrix representing 150 data points in R^3
s <- 0.1                                        # scale parameter

# Turn our Tensors into KeOps symbolic variables:
x_i <- LazyTensor(x, "i")   # symbolic object representing an arbitrary row of x, indexed by the letter "i"
y_j <- LazyTensor(y, "j")   # symbolic object representing an arbitrary row of y, indexed by the letter "j"

# Perform large-scale computations, without memory overflows:
D_ij <- sum((x_i - y_j)^2)    # symbolic matrix of pairwise squared distances, with 100 rows and 150 columns
K_ij <- exp(- D_ij / s^2)     # symbolic matrix, 100 rows and 150 columns
res <- sum(K_ij, index = "i") # actual R matrix (in fact a row vector of length 150 here)
                              # containing the column sums of K_ij
                              # (i.e. the sums over the "i" index, for each "j" index)

}
}
\author{
Ghislain Durif
}
