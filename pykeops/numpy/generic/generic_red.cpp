#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>

#include "common/keops_io.h"
#include "binders/checks.h"

namespace keops_binders {

namespace py = pybind11;


/////////////////////////////////////////////////////////////////////////////////
//                             Utils
/////////////////////////////////////////////////////////////////////////////////

//Specialization of functions in keops/binders/checks.h

// <__TYPE__, py::array::c_style>  ensures 2 things whatever is the arguments:
//  1) the precision used is __TYPE__ (float or double typically) on the device,
//  2) everything is convert as contiguous before being loaded in memory
// this is maybe not the best in term of performance... but at least it is safe.
using __NUMPYARRAY__ = py::array_t< __TYPE__, py::array::c_style >;
using __RANGEARRAY__ = py::array_t< __INDEX__, py::array::c_style >;

template <>
int get_ndim(__NUMPYARRAY__ obj_ptri) {
  return obj_ptri.ndim();
}

template <>
int get_size(__NUMPYARRAY__ obj_ptri, int l) {
  return obj_ptri.shape(l);
}

template <>
int get_size(__RANGEARRAY__ obj_ptri, int l) {
  return obj_ptri.shape(l);
}

template <>
__TYPE__* get_data(__NUMPYARRAY__ obj_ptri) {
  return (__TYPE__ *) obj_ptri.data();
}

template <>
__INDEX__* get_rangedata(__RANGEARRAY__ obj_ptri) {
  return (__INDEX__ *) obj_ptri.data();
}

template <>
bool is_contiguous(__NUMPYARRAY__ obj_ptri) {
  return obj_ptri.c_style;  // always true because of py::array::c_style
}

template <>
__NUMPYARRAY__ allocate_result_array(int* shape_out, int nbatchdims) {
  std::vector< int > shape_vector(shape_out, shape_out + nbatchdims + 2);
  return __NUMPYARRAY__(shape_vector);
}

using namespace keops;

/////////////////////////////////////////////////////////////////////////////////
//                    PyBind11 entry point
/////////////////////////////////////////////////////////////////////////////////


// the following macro force the compiler to change MODULE_NAME to its value
#define VALUE_OF(x) x

#define xstr(s) str(s)
#define str(s) #s

PYBIND11_MODULE(VALUE_OF(MODULE_NAME), m) {
m.doc() = "This module has been generated by pyKeOps."; // optional module docstring

m.def("genred_numpy", &generic_red <__NUMPYARRAY__, __RANGEARRAY__>, "Entry point to keops - numpy version.");

m.attr("tagIJ") = TAGIJ;
m.attr("dimout") = DIMOUT;
m.attr("formula") = f;
m.attr("compiled_formula") = xstr(FORMULA_OBJ_STR);
m.attr("compiled_aliases") = xstr(VAR_ALIASES_STR);
}

}
